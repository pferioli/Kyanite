<%- include ("../../partials/header") %>

<main class="site-content">

  <center>
    <%- include ("../../partials/alerts") %>
  </center>

  <div class="table-container">
    <div class="table-header">
      <span class="table-title">Cuenta Corriente Proveedor - <%=data.supplier.name%> [Cliente <%=data.client.internalCode%>]</span><br>
      <div class="preloader-wrapper small active" id="progress" style="margin-left: 30px;">
        <div class="spinner-layer spinner-green-only">
          <div class="circle-clipper left">
            <div class="circle"></div>
          </div>
          <div class="gap-patch">
            <div class="circle"></div>
          </div>
          <div class="circle-clipper right">
            <div class="circle"></div>
          </div>
        </div>
      </div>
      <div class="actions">
        <button id="button-reload" title="actualizar" onClick="window.location.reload();" class="waves-effect btn-flat nopadding"><i class="material-icons">refresh</i></button>
        <a href="/suppliers/payments/report/<%=data.supplier.id%>?clientId=<%=data.client.id%>" id="button-add" title="descargar reporte" class="modal-trigger waves-effect btn-flat nopadding"><i class="material-icons">file_download</i></a>
        <a href="#" id="button-search" title="buscar" class="search-toggle waves-effect btn-flat nopadding"><i class="material-icons">search</i></a>
      </div>
    </div>
    <div id="hide-dt" style="display:none">
      <table id="datatable" class="table display">
        <thead>
          <tr>
            <th>Factura</th>
            <th>Importe</th>
            <th>Detalles</th>
            <th>Fecha Emisión</th>
            <th>Fecha Pago</th>
            <th>Importe OP</th>
            <th>Orden de Pago</th>
            <th>Período</th>
            <th>Cuenta</th>
            <th>Numero de Cta</th>
            <th>Núm. de Cheque</th>
          </tr>
        </thead>
        <tbody>
          <% for(var i=0; i < data.paymentReceipts.length; i++) { %>
                      
              <!--Si no hay ninguna OP solo hay que mostrar los datos del comprobante-->
              
              <% if(data.paymentReceipts[i].paymentOrders.length > 0) { %>
            
                <!-- barremos cada una de las OPs -->
              
                <% for(var j=0; j < data.paymentReceipts[i].paymentOrders.length; j++) { %>
                
                  <tr data-id="<%= data.paymentReceipts[i].id %>">
                    <td>[<%=data.paymentReceipts[i].receiptType.receiptType%>] <%=data.paymentReceipts[i].receiptNumber%></td>
                    <td>$<%=data.paymentReceipts[i].amount%></td>
                    <td><%=data.paymentReceipts[i].description%></td>
                    <td><%=data.paymentReceipts[i].emissionDate%></td>                                    
                    <td><%=data.paymentReceipts[i].paymentOrders[j].paymentDate%></td>
                    <td>$<%=data.paymentReceipts[i].paymentOrders[j].amount%></td>
                    <td><%=data.paymentReceipts[i].paymentOrders[j].poNumberFormatted%></td>
                    <td><%=data.paymentReceipts[i].billingPeriod.name%></td>
                    <td>
                      <% if (data.paymentReceipts[i].paymentOrders[j].account) { %>
                        <%=data.paymentReceipts[i].paymentOrders[j].account.accountType.account%>
                      <% } %>
                    </td>
                    <td>
                      <% if (data.paymentReceipts[i].paymentOrders[j].account) { %>
                        <%=data.paymentReceipts[i].paymentOrders[j].account.accountNumber%>
                      <% } %>
                    </td>
                    <td></td>
                  </tr>
                <% } %>

              <% } else { %>

                <tr data-id="<%= data.paymentReceipts[i].id %>">
                  <td>[<%=data.paymentReceipts[i].receiptType.receiptType%>] <%=data.paymentReceipts[i].receiptNumber%></td>
                  <td>$<%=data.paymentReceipts[i].amount%></td>
                  <td><%=data.paymentReceipts[i].description%></td>
                  <td><%=data.paymentReceipts[i].emissionDate%></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td><%=data.paymentReceipts[i].billingPeriod.name%></td>
                  <td></td>
                  <td></td>
                  <td></td>
                </tr>
            <% } %>

          <% } %>
        </tbody>
        <tfoot>
          <tr>
            <th colspan="11" style="text-align: left; font-size: medium; font-weight: bold; color: darkmagenta">Total:</th>                       
          </tr>
        </tfoot>
      </table>
    </div>
  </div>

</main>

<%#- include ("./modals/newCategory.ejs") %>

<%- include ("../../partials/footer") %>

<script>

  document.addEventListener("DOMContentLoaded", function () {
 });

  $(document).ready(function () {

    var totalPaymentsReceipts=0;

    $('.search-toggle').click(function () {
      if ($('.hiddensearch').css('display') == 'none')
        $('.hiddensearch').slideDown();
      else
        $('.hiddensearch').slideUp();
    });

    var table = $('#datatable').dataTable({
      dom: "<'hiddensearch'f'>tr<'table-footer'Blip'>",
      oLanguage: {
        sSearch: '',
        sSearchPlaceholder: 'Escriba aqui su búsqueda',
        sInfo: '_START_ -_END_ de _TOTAL_',
        sLengthMenu: '<span style="margin-left:20px">Filas por página:</span><select class="browser-default">' +
          '<option value="200">200</option>' +
          '<option value="500">500</option>' +
          '<option value="1000">1000</option>' +
          '<option value="-1">Todos</option>' +
          '</select></div>'
      },
      columnDefs: [ 
        {
          className: "center-align",
          targets: [0,1]
        },
        {
          targets: 2,
          visible: true,
          searchable: false,
          render: $.fn.dataTable.render.ellipsis(80, true)
        },
        {
          targets: [1,6],
          type: 'currency',
        },
        {
          targets: [3,4],
          render: function (data) {
          if (data)
            return moment(data).format('DD/MM/YYYY');
          else return "";
          }, 
        },        
      ],
      rowsGroup: [  // Always the array (!) of the column-selectors in specified order to which rows groupping is applied
				            // (column-selector could be any of specified in https://datatables.net/reference/type/column-selector)
                  0,1,2,3	
      ],
      // rowGroup: {
      //     dataSrc: [0],
      //     startRender: function ( rows, group ) {         
      //       switch(rows.count()){
      //         case 0: {return group + ' / sin órden de pago';} break;
      //         case 1: {return group + ' / ' + rows.count().toString() + ' órden de pago';} break;
      //         default:{return group + ' / ' + rows.count().toString() + ' órdenes de pago';} break;
      //       }                             
      //     },
      //     endRender: function ( rows, group ) {
                
      //       // Remove the formatting to get integer data for summation
      //       var intVal = function ( i ) { 
      //         return typeof i === 'string' ? i.replace(/[\$,]/g, '')*1 : typeof i === 'number' ? i : 0; 
      //       };
 
      //       var totalAgreggate = rows
      //               .data()
      //               .pluck(1)
      //               .reduce( function (a, b) {
      //                   return intVal(a )+ intVal(b)*1;
      //               }, 0) / rows.count();

      //       var amountAgreggate = rows.data()
      //         .filter( function ( data, index ) {
      //           if(data[6] !== "") 
      //             return true;
      //           else
      //             return false;
      //           })
      //         .pluck(5)
      //         .reduce(function (a, b) { 
      //           return intVal(a) + intVal(b); }, 0 
      //         );

      //         totalPaymentsReceipts+=totalAgreggate;

      //         let balance = totalAgreggate - amountAgreggate;

      //         if((balance <=0.001)&&(balance >=-0.001)) balance=0;
 
      //         return $('<tr/>')
      //           .append( '<td colspan="11">Subtotal OPs = <span class="amount">' + $.fn.dataTable.render.number('.', ',', 2, '$').display( amountAgreggate ) + 
      //             '</span> // Saldo Proveedor = <span class="amount">' + $.fn.dataTable.render.number('.', ',', 2, '$').display( balance ) + '</span></td>')
      //         },
      // },      
      colReorder: true,
      pageLength: 200,
      fixedColumns: { 
        leftColumns: 3
      },
      order: [[0, 'asc']],
      autowidth: true,
      //scrollY: '500px',
      scrollX: true,
      scrollCollapse: true,
      paging: true,
      fnInitComplete: function () {
        $('#hide-dt').show();
        $('#progress').hide();
      },
      "footerCallback": function ( row, data, start, end, display ) {
            
        var api = this.api(), data;
 
        // Remove the formatting to get integer data for summation
        var intVal = function ( i ) { return typeof i === 'string' ? i.replace(/[\$,]/g, '')*1 : typeof i === 'number' ? i : 0; };
 
        // Total over all pages
        //totalPaymentsReceipts = api.column(1).data().reduce( function (a, b) { return intVal(a) + intVal(b); }, 0 );

        totalPaymentsOrders = api.column(5).data().reduce( function (a, b) { return intVal(a) + intVal(b); }, 0 );
 
        //totalPaymentsReceipts = api.column(1).data().reduce( function (a, b) { return intVal(a) + intVal(b); }, 0 );

        let prevPaymentReceipt = "", totalPaymentsReceipts=0;
        
        for(const mRow of data){
          const paymentReceiptNumber = mRow[0];
          const paymentReceiptAmount = intVal(mRow[1]);
          if(paymentReceiptNumber !== prevPaymentReceipt){
            prevPaymentReceipt=paymentReceiptNumber;
            totalPaymentsReceipts+=paymentReceiptAmount;
          }
        }
        console.log("total = " + totalPaymentsReceipts)
        
        let balance = totalPaymentsReceipts-totalPaymentsOrders;

        if((balance <=0.001)&&(balance >=-0.001)) balance=0;

        // Update footer
        $(api.column(1).footer()).html("Total Comprobantes: " + $.fn.dataTable.render.number('.', ',', 2, '$').display( totalPaymentsReceipts ) + 
        " // Total OPs: " + $.fn.dataTable.render.number('.', ',', 2, '$').display( totalPaymentsOrders ) +
        " // Saldo Proveedor: " + $.fn.dataTable.render.number('.', ',', 2, '$').display( balance ));
      }
    });
  });

</script>