<%- include ("../../partials/header") %>

<main class="site-content">
    <div class="container" style="margin-top: 50px;">
        <form class="col s12" method="post" action='/expenses/paymentReceipts/createPaymentOrder/<%=data.paymentReceipt.id%>' enctype="multipart/form-data">
            <div class="card">
                <div class="card-content">
                    <span class="card-title">Cree una nueva Orden de Pago para una factura o comprobante</span>
                    <div class="row" style="margin-top: 20px;">
                        <div class="input-field col s9">
                            <i class="material-icons prefix">location_city</i>
                            <input id="client" name="client" type="text" value="<%=data.client.name%> [<%=data.client.internalCode%>]" disabled />
                            <label for="name">Nombre del Barrio</label>
                        </div>
                        <div class="input-field col s3">
                            <i class="material-icons prefix">calendar_today</i>
                            <input id="billingPeriod" name="billingPeriod" type="text" value="" disabled />
                            <label for="billingPeriod">Período de Liquidación</label>
                            <input type="hidden" name="billingPeriodId" id="billingPeriodId" value="" />
                        </div>
                    </div>

                    <div class="row">
                        
                        <div class="input-field col s4">
                            <i class="material-icons prefix">account_balance</i>
                            <select id="accountSelect" required >
                                <option value="" disabled selected>Seleccione la cuenta</option>
                                <% for(var i=0; i < data.clientAccounts.length; i++) { %>
                                    <option value=" <%=data.clientAccounts[i].id%>">[<%=data.clientAccounts[i].accountType.account%>] <%=data.clientAccounts[i].accountType.description%> (ID:<%=data.clientAccounts[i].id%>)</option>
                                <% } %>
                            </select>
                            <label>Cuenta de Origen de los fondos</label>
                            <input type="hidden" name="accountId" id="accountId" />
                        </div>
            
                        <div id="accountInfoDiv" class="input-field col s8">
                            <input id="accountInfo" name="accountInfo" type="text" value="" style="font-size: smaller;" readonly />
                            <label for="accountInfo">Detalles de la cuenta</label>
                        </div>

                        <div id="checksSelectDiv" class="input-field col s12">
                            <i class="material-icons prefix">money</i>
                            <select id="checksSelect" disabled>
                                <option value="" disabled selected>Seleccione un cheque</option>                               
                            </select>
                            <label>Seleccione un cheque para vincular con la Orden de Pago</label>
                        </div>
                    </div>

                    <div class="row">
                        <div class="input-field col s2">
                            <i class="material-icons prefix">monetization_on</i>
                            <input id="amount" name="amount" type="number" min="0.00" step="0.01" class="validate" required />
                            <label for="amount">Importe a pagar</label>
                        </div>
                        
                        <div class="input-field col s2">
                            <input id="total" class="validate" readonly />
                            <label for="amount">Importe Total</label>
                        </div>
  
                        <div class="input-field col s2">
                            <i class="material-icons prefix">date_range</i>
                            <input type="text" class="datepicker" id="dtpPaymentDate" name="dtpPaymentDate" required>
                            <label for="dtpPaymentDate">Fecha</label>
                            <input type="hidden" name="paymentDate" id="paymentDate" />
                        </div>
                    
                    </div>

                </div>

                <div class="card-action right-align">
                    <button id="add_button" type='submit' class="waves-effect waves-light btn green" style="margin-right: 10px;" disabled><i class="material-icons right">save</i>Crear OP</button>
                    <button action="action" onclick="window.history.go(-1); return false;" type="submit" value="Cancel" class="waves-effect waves-light btn red"><i class="material-icons right">cancel</i>Volver</button>
                </div>
            </div>
        </form>
    </div>
    <center>
        <%- include ("../../partials/alerts") %>
    </center>
</main>

<%- include ("../../partials/modals/billingPeriod.ejs") %>

<%- include ("../../partials/footer") %>

<script type="text/javascript" src="/javascripts/billingPeriods.js"></script>
<script type="text/javascript" src="/javascripts/accounts.js"></script>
<script type="text/javascript" src="/javascripts/splittedChecks.js"></script>


<script>

    document.addEventListener("DOMContentLoaded", function () {
        var elems = document.querySelectorAll("select");
        var instances = M.FormSelect.init(elems, {});

        elems = document.querySelectorAll('.datepicker');
        instances = M.Datepicker.init(elems, {
            format: 'dd/mm/yyyy',
            autoClose: true,
            onOpen: function (e) {
                var that = this;
                that.hasEvent = false;
                this.cancelBtn.addEventListener('click', Cancel.bind(that))
                this.doneBtn.addEventListener('click', Done.bind(that))
            },
            onClose: function (e) {
                var that = this;
                this.cancelBtn.removeEventListener('click', Cancel.bind(that))
                this.doneBtn.removeEventListener('click', Done.bind(that))
            },
            onSelect: function (selectedDate) {
                if (this.el.id === 'dtpEmissionDate') {
                    document.getElementById('emissionDate').value = this.date.toISOString();
                }
            }
        });

        elems = document.querySelectorAll('.modal');
        instances = M.Modal.init(elems, {});       

        getActiveBillingPeriod(htmlDecode("<%=data.client.id%>"));

        document.getElementById('accountSelect').onchange = async function () {

            getSelectedAccountDetails(this.value, 'accountInfo');

            document.getElementById('accountId').value = this.value;
            
            M.updateTextFields();
        }
    });

    async function getSelectedAccountDetails(accountId, infoField) {

        const account = await getClientAccountsInfo(accountId);

        let message = "[" + account.accountType.account + "] " + account.accountType.description;

        if (account.accountType.account.includes("CC$") || account.accountType.account.includes("CA$") || account.accountType.account.includes("CCU$") || account.accountType.account.includes("CAU$")) {
            message = "[" + account.accountType.account + "]" + " - " + account.bank.name;
            if (account.cbu) { message = message + " / CBU: " + account.cbu };
            if (account.accountNumber) { message = message + " / CUENTA: " + account.accountNumber };
            if (account.accountAlias) { message = message + " / ALIAS: " + account.accountAlias };
        }

        if (account.comments) { message = message + " - " + account.comments; }

        document.getElementById(infoField).value = message; M.updateTextFields();

        const checksSelect = document.getElementById('checksSelect');

        if(account.accountType.account === 'VAL') {
            checksSelect.disabled = false; M.FormSelect.init(checksSelect, {});
        } else {
            checksSelect.disabled = true;
        }        
    }

    function getSplittedChecks(homeOwnerId, fieldID) {

        let selectField = document.getElementById(fieldID);
        selectField.options.length = 0;
        selectField.innerHTML = selectField.innerHTML + "<option value=\"\" selected disabled>" + "Seleccione el cheque" + "</option>"

        fetch('/checks/split/po/' + homeOwnerId + '?statusId=0')   //0 = pending / 1 = assigned status
            .then(response => {
                if (response.status == 200) {
                    return response.text();
                } else {
                    throw "Respuesta incorrecta del servidor"
                }
            })
            .then(response => {
                const splittedChecks = JSON.parse(response);
                for (i = 0; i < splittedChecks.length; i++) {
                    selectField.innerHTML = selectField.innerHTML + "<option value=\"" + splittedChecks[i].id + "\">" + 
                        `${splittedChecks[i].check.bank.name} (Nº ${splittedChecks[i].check.number}) $${splittedChecks[i].amount}` + "</option>"
                }
                
                M.FormSelect.init(selectField, {});
            })
            .catch(err => {
                console.log(err);
            });
    }

    function Cancel() {
        if (!this.hasEvent) {
            this.hasEvent = true;
            console.log('Clicked on cancel btn:', this.cancelBtn);
        }
    }
    function Done() {
        if (!this.hasEvent) {
            this.hasEvent = true;
            console.log('Clicked on done btn:', this.doneBtn);
            if (this.date) {
                if (this.el.id === 'dtpEmissionDate') { document.getElementById('emissionDate').value = this.date; }
            }
        }
    }
  
</script>