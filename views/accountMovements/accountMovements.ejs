<%- include ("../partials/header") %>

<main class="site-content">

    <center>
        <%- include ("../partials/alerts") %>
    </center>

    <div class="table-container">

        <div class="table-header">

            <span class="table-title">Cuenta Corriente - [<%=data.client.internalCode%>] <span style="font-weight: bold;"><%=data.client.name%></span></span>

            <div class="preloader-wrapper small active" id="progress" style="margin-left: 30px;">
                <div class="spinner-layer spinner-green-only">
                    <div class="circle-clipper left">
                        <div class="circle"></div>
                    </div>
                    <div class="gap-patch">
                        <div class="circle"></div>
                    </div>
                    <div class="circle-clipper right">
                        <div class="circle"></div>
                    </div>
                </div>
            </div>

            <div class="actions">
                <button id="button-reload" onClick="window.location.reload();" class="waves-effect btn-flat nopadding"><i class="material-icons">refresh</i></button>
                
                <% if(data.isFiltered===false) { %>
                    <a id="button-filter" class="waves-effect btn-flat nopadding" onclick='filterByAccount(this,"<%=data.isFiltered%>")'><i class="material-icons">filter_list</i></a>
                <% } else { %>
                    <a id="button-filter" class="waves-effect btn-flat nopadding" onclick='filterByAccount(this,"<%=data.isFiltered%>")'><i class="material-icons red-text">filter_list</i></a>
                <% } %>
                
                <a href="/movements/new/<%=data.client.id%>" id="button-add" class="modal-trigger waves-effect btn-flat nopadding"><i class="material-icons">add_box</i></a>
                
                <button id="button-report-pdf" onClick="openInNewTab('/movements/client/<%=data.client.id%>/report?periodId=<%=data.periods%>');" class="waves-effect btn-flat nopadding"><i class="material-icons">picture_as_pdf</i></button>

                <a href="#" id="button-search" class="search-toggle waves-effect btn-flat nopadding"><i class="material-icons">search</i></a>
            </div>
            
        </div>
        
        <div id="hide-dt" style="display:none">
            <table id="datatable" class="table display">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Categoria</th>
                        <th>Sentido</th>
                        <th>Importe</th>
                        <th>Saldo</th>
                        <th>Cuenta</th>
                        <th>Fecha</th>
                        <th>Descripcion</th>
                        <th>Periodo</th>
                        <th>Usuario</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    <% for(var i=0; i < data.movements.length; i++) { %>
                        <tr data-id="<%= data.movements[i].id %>">
                            <td><%= data.movements[i].id %></td>
                            <td><%= data.movements[i].categoryName%> [<%= data.movements[i].category%>]</td>
                            <td>
                                <%if(data.movements[i].deletedAt === null){ %>
                                    <% if(Math.sign(data.movements[i].amount) === 1) { %>
                                        <i class="material-icons">add_circle_outline</i>
                                    <% } %>
                                    <% if(Math.sign(data.movements[i].amount) === -1) { %>
                                        <i class="material-icons">remove_circle_outline</i>
                                    <% } %>                                
                                <% } else { %>
                                    <i class="material-icons">highlight_off</i>
                                <% } %>
                            </td>
                            <td>$ <%= data.movements[i].amount %></td>
                            <td>
                                <% if(data.movements[i].balance) { %>
                                    $ <%= data.movements[i].balance %>
                                <% } %>
                            </td>

                            <td><%= data.movements[i].account.accountType.description %> [<%= data.movements[i].account.accountType.account %>] (ID: <%= data.movements[i].accountId %>)</td>
                            
                            <%if(data.movements[i].deletedAt === null){ %>
                                <td><%= data.movements[i].createdAt %></td>
                            <% } else { %>
                                <td><%= data.movements[i].deletedAt %></td>
                            <% } %>
                            
                            <td></td>

                            <td>
                                <% if(data.movements[i].billingPeriod.statusId === 0) { %>
                                <i class="material-icons">calendar_today</i>
                                <% } %>
                                <% if(data.movements[i].billingPeriod.statusId=== 1) { %>
                                <i class="material-icons">lock_open</i>
                                <% } %>
                                <% if(data.movements[i].billingPeriod.statusId === 2) { %>
                                <i class="material-icons">lock</i>
                                <% } %>
                                <% if(data.movements[i].billingPeriod.statusId === 3) { %>
                                <i class="material-icons">cancel</i>
                                <% } %>

                                <a href="/periods/<%=data.client.id%>"><span style="padding-left: 10px; vertical-align: 8px;"><%= data.movements[i].billingPeriod.name %></span></a>

                            </td>
                            
                            <td><%= data.movements[i].user.name %></td>

                            <td>
                                <button id="button-details" onclick='movementDetail("<%=data.client.id%>","<%= data.movements[i].id%>")' class="btn-flat btn-small waves-effect waves-light"> <i class="material-icons">more</i></a>
                            </td>
                        </tr>
                    <% } %>
                </tbody>
                <tfoot>
                        <tr>
                            <th colspan="9" style="text-align: right; font-size: medium; font-weight: bold; color: darkmagenta">Total:</th>
                            <th style="text-align: center; font-size: medium; font-weight: bold; color:darkmagenta"></th>
                        </tr>
                </tfoot>
            </table>
        </div>
    </div>

    <div class="container">
        <div class="row center-align" style="font-size:small" id="lastUpdate"></div>
    </div>

    <input type="hidden" name="clientId" id="clientId" value=<%=data.client.id%> />
    <input type="hidden" name="periodId" id="periodId" value=<%=data.periods%> />

</main>

<%- include ("./modals/accountSelection.ejs") %>

<%- include ("./modals/movementDetails.ejs") %>

<%- include ("../partials/footer") %>

<script type="text/javascript" src="/javascripts/accounts.js"></script>
<script type="text/javascript" src="/javascripts/accountMovements.js"></script>

<script>

    document.addEventListener("DOMContentLoaded", function () {
        var elems = document.querySelectorAll(".modal");
        var instances = M.Modal.init(elems, {})

        document.getElementById('lastUpdate').textContent = 'Ultima actualizacion ' + Date();
    });
    
    function openInNewTab(url) {
        var redirectWindow = window.open(url, '_blank');
        redirectWindow.document.title = "Detalle de movimientos";
        redirectWindow.location;
    };
    
    async function clientAccountSelector(fieldId, clientId){

        let selectField = document.getElementById(fieldId);
        selectField.options.length = 0;
        selectField.innerHTML = selectField.innerHTML + "<option value=\"\" selected disabled>" + "Seleccione las cuentas" + "</option>"

        const accounts = await getClientAccounts(clientId);

        for (i = 0; i < accounts.length; i++) {
            selectField.innerHTML = selectField.innerHTML + "<option value=\"" + accounts[i].id + "\">" + 
                `[${accounts[i].accountType.account}] ${accounts[i].accountType.description} (ID:${accounts[i].id})`  + "</option>"
        }
                
        M.FormSelect.init(selectField, {});
    }

    function filterByAccount(button, isFiltered){
        
        const clientId = htmlDecode("<%= data.client.id %>");

        if(isFiltered === "true") {
            window.location.href = '/movements/client/' + clientId; return;
        }

        var _elem = document.getElementById('modalAccountSelection');
        
        var instances = M.Modal.init(_elem, 
            {   
                onOpenStart: function(){ clientAccountSelector('accountSelect', clientId)}
            })

        var modal = M.Modal.getInstance(_elem);

        document.getElementById('modalClientId').value = "<%=data.client.id%>";
        document.getElementById('modalPeriodId').value = "<%=data.periods%>";

        modal.open();
    }

    $(document).ready(function () {

        $('.search-toggle').click(function () {
            if ($('.hiddensearch').css('display') == 'none')
                $('.hiddensearch').slideDown();
            else
                $('.hiddensearch').slideUp();
        });

        var table = $('#datatable').dataTable({
            dom: "<'hiddensearch'f'>tr<'table-footer'Blip'>",
            oLanguage: {
                sSearch: '',
                sSearchPlaceholder: 'Escriba aqui su búsqueda',
                sInfo: '_START_ -_END_ de _TOTAL_',
                sLengthMenu: '<span style="margin-left:20px">Filas por página:</span><select class="browser-default">' +
                    '<option value="200">200</option>' +
                    '<option value="500">500</option>' +
                    '<option value="1000">1000</option>' +
                    '<option value="-1">Todos</option>' +
                    '</select></div>'
            },
            columnDefs: [
                {
                    targets: -1,
                    searchable: false,
                    sortable: false,
                    className: "left-align",
                },
                {
                    targets: 0,
                    className: "center-align",
                },
                {
                    targets: 2,
                    searchable: false,
                    sortable: true,
                    className: "center-align",
                },
                {
                    targets: [3,4],
                    type: 'currency',
                },
                // {
                //     targets:5,
                //     visible: false,
                //     searchable: false
                // },
                {   targets: 6,
                    render: function (data) {
                        if (data)
                            return moment(data).format('DD/MM/YYYY HH:mm:ss');
                        else return "";
                    }, 
                },
            ],
            colReorder: true,
            fixedColumns: {
                leftColumns: 1
            },
            // rowGroup: {
            //     dataSrc: 5,
            //     // startRender: function (rows, group) {
            //     //   return $('<tr/>')
            //     //     .append( '<td class="left-align">'+group+'</td>' );                
            //     // }
            // },
            rowGroup: {
                dataSrc: [5],
                
                endRender: function ( rows, group ) {
                
                    // Remove the formatting to get integer data for summation
                    var intVal = function ( i ) { 
                        return typeof i === 'string' ? i.replace(/[\$,]/g, '')*1 : typeof i === 'number' ? i : 0; 
                    };
 
                    var amountAgreggate = rows.data()
                        .filter( function ( data, index ) {
                            if(data[4] !== "") 
                                return true;
                            else
                                return false;
                        })
                        .pluck(3)
                        .reduce(function (a, b) { 
                            return intVal(a) + intVal(b); }, 0 
                        );
                
                    console.log(amountAgreggate);
                    
                    amountAgreggate = $.fn.dataTable.render.number('.', ',', 2, '$').display( amountAgreggate );
 
                    return $('<tr/>')
                        .append( '<td colspan="9">Subtotal para '+group+'</td>' )
                        .append( '<td class="amount">'+amountAgreggate+'</td>' );
                },
            },
            pageLength: 200,
            order: [[5, 'asc'],[0, 'desc']],
            autowidth: true,
            scrollY: '500px',
            scrollX: true,
            scrollCollapse: true,
            paging: true,
            buttons: [
                {
                    extend: 'colvis',
                    text: 'Columnas',
                },
                {
                    extend: 'print',
                    className: '',
                    title: '',
                    // autoPrint: false,
                    customize: function (win) {
                        $(win.document.body)
                            .css('font-size', '10pt')
                            .prepend(
                                '<h4>Title Test</h4>',
                            );
                        $(win.document.body).find('table')
                            .addClass('compact')
                            .css('font-size', 'inherit',);
                    }
                },
                {
                    extend: 'excelHtml5',
                    exportOptions: {
                        columns: ':visible(th:not(:last-child))',
                        search: 'applied',
                        order: 'applied'
                    },
                    customize: function (xlsx) {
                        var source = xlsx.xl['workbook.xml'].getElementsByTagName('sheet')[0];
                        source.setAttribute('name', 'Clientes');
                    }
                },
                { extend: 'csvHtml5' },
                { extend: 'copyHtml5' },
                {
                    text: 'PDF',   //https://codepen.io/vaucher/pen/wjwdMK
                    extend: 'pdfHtml5',
                    filename: 'clients',
                    orientation: 'landscape',     //portrait
                    pageSize: 'A4',               //A3 , A5 , A6 , legal , letter
                    exportOptions: {
                        columns: ':visible',
                        search: 'applied',
                        order: 'applied'
                    }
                }
            ],
            fnInitComplete: function () {
                $('#hide-dt').show();
                $('#progress').hide();
            },             
            footerCallback: function ( row, data, start, end, display ) {
            
                var api = this.api(), data;
 
                // Remove the formatting to get integer data for summation
                var intVal = function ( i ) { return typeof i === 'string' ? i.replace(/[\$,]/g, '')*1 : typeof i === 'number' ? i : 0; };
 
                // Total over all pages
                total = api.rows().data().filter( function ( data, index ) {
                            if(data[4] !== "") 
                                return true;
                            else
                                return false;
                        })
                        .pluck(3).reduce( function (a, b) { return intVal(a) + intVal(b); }, 0 );
 
                // Total over this page
                // pageTotal = api.column(8, { page: 'current'}).data().reduce( function (a, b) { return intVal(a) + intVal(b); }, 0 );
    
                // Update footer
                $(api.column(9).footer()).html($.fn.dataTable.render.number('.', ',', 2, '$').display( total )); //     Number.parseFloat(total).toFixed(2));
            }
        });
    });

    async function movementDetail(clientId, movementId){
    
        var _elem = document.getElementById('modalMovementDetails');
        
        var instances = M.Modal.init(_elem, 
            {   
                onCloseEnd: function () { $("#tb").empty(); },
                
                onOpenStart: async function(){ 

                    const url =`/movements/client/${clientId}/details/${movementId}`

                    const details = await getMovementDetail(url);

                    var tableRef = document.getElementById('tableMovementsDetails').getElementsByTagName('tbody')[0];

                    defaultHeader(tableRef, details);

                    if(details === undefined) return;

                    if(details.movement.category.toUpperCase() === 'P'){
                        paymentOrderDetails(tableRef, details);
                    }

                    if((details.movement.category.toUpperCase() === 'C')||(details.movement.category.toUpperCase() === 'I')){
                        collectionDetails(tableRef, details);
                    }

                    if(details.movement.category.toUpperCase() === 'V'){
                        investmentDetails(tableRef, details);
                    }

                    if(details.movement.category.toUpperCase() === 'T'){
                        accountTransferDetails(tableRef, details);
                    }       
                    
                    if(details.movement.category.toUpperCase() === 'S'){
                        monthlyBalanceDetails(tableRef, details);
                    }

                    if(details.movement.category.toUpperCase() === 'J'){
                        manualAccountAdjustmentDetails(tableRef, details);
                    }
                }
            })

        var modal = M.Modal.getInstance(_elem);

        modal.open();
    };

    
</script>